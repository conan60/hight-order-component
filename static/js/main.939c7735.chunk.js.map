{"version":3,"sources":["Movie/Movie.js","Spinner/Spinner.js","HOC-movie-spinner/withLoading.js","Movies/Movies.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","overflow","padding","spacing","paper","maxWidth","margin","bigAvatar","width","height","Movie","name","image","description","classes","isLoading","ident","Grid","item","md","xl","className","Paper","container","wrap","Avatar","src","alt","xs","Typography","variant","component","progress","Spinner","CircularProgress","withLoadign","Component","props","key","Movies","state","movies","setTimeout","setState","map","el","this","i","withLoading","App","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAOMA,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,EACVC,SAAU,SACVC,QAASJ,EAAMK,QAAQ,EAAG,IAE5BC,MAAO,CACLC,SAAU,IACVC,OAAO,GAAD,OAAKR,EAAMK,QAAQ,GAAnB,WACND,QAASJ,EAAMK,QAAQ,IAEzBI,UAAW,CACTD,OAAQ,GACRE,MAAO,IACPC,OAAQ,QA0BGC,MArBf,YAA0D,IAA1CC,EAAyC,EAAzCA,KAAKC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,YACnBC,GADiD,EAAlBC,UAAkB,EAARC,MAC/BpB,KAEhB,OACE,kBAACqB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,UAAWP,EAAQf,MAC1C,kBAACuB,EAAA,EAAD,CAAOD,UAAWP,EAAQV,OACxB,kBAACa,EAAA,EAAD,CAAMM,WAAS,EAACC,KAAK,SAASrB,QAAS,GACrC,kBAACc,EAAA,EAAD,CAAMC,MAAI,GACR,kBAACO,EAAA,EAAD,CAAQC,IAAKd,EAAOe,IAAI,SAASN,UAAWP,EAAQP,aAEtD,kBAACU,EAAA,EAAD,CAAMC,MAAI,EAACU,IAAE,GACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAMpB,GACzC,kBAACkB,EAAA,EAAD,KAAahB,Q,QClCnBjB,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCkC,SAAU,CACR1B,OAAQR,EAAMK,QAAQ,OAcX8B,MAVf,WACE,IAAMnB,EAAUlB,IAEhB,OACE,6BACE,kBAACsC,EAAA,EAAD,CAAkBb,UAAWP,EAAQkB,aCN5BG,MALf,SAAqBC,GACjB,OAAOA,EAAUC,MAAMtB,UAAY,kBAAC,EAAD,CAASuB,IAAKF,EAAUC,MAAMrB,QAAY,kBAAC,EAAD,eAAOsB,IAAKF,EAAUC,MAAMrB,OAAWoB,EAAUC,SCgDnHE,EA/Cf,YACI,WAAYF,GAAO,IAAD,8BACd,4CAAMA,KAGDG,MAAQ,CACTC,OAAS,CACL,CACI9B,KAAO,gBACPC,MAAQ,+EACRC,YAAc,yKACdE,WAAY,GAEhB,CACIJ,KAAO,OACPC,MAAQ,mEACRC,YAAc,0LACdE,WAAY,KAhBV,EADtB,iFAuBwB,IAAD,OACX2B,WAAW,WAEP,EAAKC,SAAS,CAACF,OAAS,EAAKD,MAAMC,OAAOG,IAAI,SAAAC,GAE9B,OADAA,EAAG9B,WAAY,EACR8B,OAIvB,OAhChB,+BAuCQ,OACI,kBAAC5B,EAAA,EAAD,CAAMM,WAAS,EAACpB,QAAS,GACpB2C,KAAKN,MAAMC,OAAOG,IAAI,SAACC,EAAGE,GAAJ,OAAQC,EAAY,kBAAC,EAAD,eAAOV,IAAKS,EAAG/B,MAAO+B,GAAOF,YAzCxF,GAA4BT,aCUba,G,uLAVX,OACE,yBAAK5B,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,Y,GALQ6B,IAAMd,YCQJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.939c7735.chunk.js","sourcesContent":["import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    overflow: 'hidden',\n    padding: theme.spacing(0, 3),\n  },\n  paper: {\n    maxWidth: 400,\n    margin: `${theme.spacing(1)}px auto`,\n    padding: theme.spacing(2),\n  },\n  bigAvatar: {\n    margin: 10,\n    width: 100,\n    height: 100,\n  },\n}));\n\n\nfunction Movie({name,image,description,isLoading,ident}) {\n  const classes = useStyles();\n\n  return (\n    <Grid item md={4} xl={3} className={classes.root}>\n      <Paper className={classes.paper}>\n        <Grid container wrap=\"nowrap\" spacing={2}>\n          <Grid item>\n            <Avatar src={image} alt=\"avatar\" className={classes.bigAvatar}/>\n          </Grid>\n          <Grid item xs>\n            <Typography variant=\"h5\" component=\"h2\">{name}</Typography> \n            <Typography>{description}</Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Grid>\n  );\n}\n\n\nexport default Movie;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles(theme => ({\n  progress: {\n    margin: theme.spacing(2),\n  },\n}));\n\nfunction Spinner() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <CircularProgress className={classes.progress} />\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React from 'react';\nimport Spinner from '../Spinner/Spinner'\nimport Movie from '../Movie/Movie'\n\nfunction withLoadign(Component) {\n    return Component.props.isLoading ? <Spinner key={Component.props.ident}/>  : <Movie key={Component.props.ident} {...Component.props}/>;\n    \n}\n\nexport default withLoadign;\n","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Movie from '../Movie/Movie';\nimport withLoading from '../HOC-movie-spinner/withLoading'\n\n\nexport class Movies extends Component {\n    constructor(props){\n        super(props);\n\n\n        this.state = {\n            movies : [\n                {\n                    name : \"Robin de bois\",\n                    image : \"http://mondocine.net/wp-content/uploads/2018/11/robin_des_bois_film_2018.jpg\",\n                    description : \"Robin de Loxley, combattant aguerri revenu des croisades, et un chef maure prennent la tête d’une audacieuse révolte contre la corruption des institutions.\",\n                    isLoading : true\n                },\n                {\n                    name : \"Dora\",\n                    image : \"https://static.actu.fr/uploads/2019/08/affiche-dora-854x1139.jpg\",\n                    description : \"Dora débarque sur grand écran, tout comme les fameux Playmobil®. Le Roi lion est de retour, Toy Story aussi, sans oublier les autres fictions d'une semaine très familiale.\",\n                    isLoading : true\n                }\n            ]\n        }\n    }\n\n    componentDidMount(){\n            setTimeout(() => {\n\n                this.setState({movies : this.state.movies.map(el=>{\n                                el.isLoading = false;\n                                return el;\n                            })\n                }) \n\n             }, 2000);\n   \n       \n    }\n\n\n    render() {\n        return (\n            <Grid container spacing={2}>\n                {this.state.movies.map((el,i)=>withLoading(<Movie key={i} ident={i} {...el}/>))}\n            </Grid>\n        )\n    }\n}\n\nexport default Movies;\n","import React from 'react';\nimport Movies from './Movies/Movies'\nimport './App.css';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Movies/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}